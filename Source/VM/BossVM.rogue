module BossVM

local vm = BossVM()

local g = BossObject()

local m_add = BossMethod( vm, "add" )
m_add.write( BossOpcode.READ_ARG_1 )
m_add.write( BossOpcode.READ_ARG_2 )
m_add.write( BossOpcode.ADD )
m_add.write( BossOpcode.RETURN )
g.add( m_add )

local task = g.call( "add", @[3,4] )
if (task)
  trace task.is_finished
  if (task.is_finished) trace task.result
endIf

class BossVM [singleton]
  PROPERTIES
    objects         = BossObject[]
    strings         = String[]
    string_lookup   = StringTable<<Int32>>()
    literal_real64s = Real64[](0)
    literal_real32s = Real32[](0)

    id_list         = String[]
    id_lookup       = StringTable<<Int32>>()

    visited_objects = Logical[]
    visited_strings = Logical[]

  METHODS
    method init
      BossVM = this   # set singleton

    method string_to_id( value:String )->Int32
      local entry = id_lookup.find( value )
      if (entry) return entry.value

      local id = id_list.count
      id_lookup[ value ] = id
      id_list.add( value )
      return id

    method id_to_string( id:Int32 )->String
      assert (id >= 0 and id < id_list.count)
      return (this.id_list[id])

endClass

class BossMethod
  PROPERTIES
    vm      : BossVM
    name_id : Int32
    code    = Int32[]

  METHODS
    method init( vm, name:String )
      name_id = vm.string_to_id( name )

    method address->Int32
      return code.count

    method to->String
      return vm.id_to_string(name_id) + "()"

    method write( opcode:BossOpcode, value:Int32 )->Int32
      write( opcode->Int32 )
      return write( value )

    method write( opcode:BossOpcode, value:Real64 )->Int32
      write( opcode->Int32 )
      vm.literal_real64s.add( value )
      return write( vm.literal_real64s.count - 1 )

    method write( opcode:BossOpcode, value:String )->Int32
      write( opcode->Int32 )
      return write( value )

    method write( opcode:BossOpcode )->Int32
      code.add( opcode->Int32 )
      return code.count - 1

    method write( value:Int32 )->Int32
      code.add( value )
      return code.count - 1

    method write( value:String )->Int32
      local entry = vm.string_lookup.find( value )
      if (entry) return write( entry.value )

      vm.strings.add( value )
      return write( vm.strings.count - 1 )
endClass

enum BossOpcode
  NOP
  HALT
  RETURN
  CALL_2
  LITERAL_INT32
  LITERAL_REAL64
  STRING
  READ_ARG_1
  READ_ARG_2
  READ_ARG_3
  READ_ARG_N
  ADD
  PRINT
  PRINTLN
endEnum

class BossCall
  PROPERTIES
    context : BossValue
    m       : BossMethod
    args    : BossValue[]

  METHODS
    #method init( context, method_name:String, arg1=null:BossValue, arg2=null:BossValue, arg3=null:BossValue )

    method init( context, m, arg1=null:BossValue?, arg2=null:BossValue?, arg3=null:BossValue? )
      if (arg1.exists) arg( arg1.value )
      if (arg2.exists) arg( arg2.value )
      if (arg3.exists) arg( arg3.value )

    method arg( arg:BossValue )->this
      ensure args
      args.add( arg )
      return this

    method call->BossTask
      local task = BossTask( this )
      task.execute
      return task

endClass

class BossCallFrame( m:BossMethod, ip=0:Int32, fp=0:Int32, arg_count=0:Int32 ) [compound]
  METHODS
    method to->String
      return "$ @$" (m,ip)
endClass

class BossTask
  PROPERTIES
    vm          : BossVM
    stack       : BossValue[]
    frame       : BossCallFrame
    call_stack  : BossCallFrame[]

    is_finished : Logical

  METHODS
    method init( call:BossCall )
      ensure stack
      ensure call_stack

      vm = call.m.vm
      stack.add( call.context )
      frame = BossCallFrame( call.m )
      if (call.args)
        forEach (arg in call.args)
          stack.add( arg )
          ++frame.arg_count
        endForEach
      endIf

    method execute->Logical
      if (is_finished) return false

      local vm    = this.vm
      local stack = this.stack
      local frame = this.frame
      local code  = frame.m.code
      loop
        local opcode = BossOpcode( code[ frame.ip ] )
        ++frame.ip
        which (opcode)
          case BossOpcode.NOP
            noAction

          case BossOpcode.HALT
            this.frame = frame
            is_finished = true
            return false

          case BossOpcode.RETURN
            local result = ?:{ stack.count>frame.fp+frame.arg_count:stack.last || BossValue.UNDEFINED }
            if (call_stack.count)
              frame = call_stack.remove_last
              stack.discard_from( frame.fp + frame.arg_count + 1 ).add( result )
            else
              stack.clear.add( result )
              this.frame = frame
              is_finished = true
              return false
            endIf

          case BossOpcode.CALL_2

          case BossOpcode.LITERAL_INT32
            stack.add( BossValue(code[frame.ip]) )
            ++frame.ip

          case BossOpcode.LITERAL_REAL64
            stack.add( BossValue(vm.literal_real64s[code[frame.ip]]) )
            ++frame.ip

          case BossOpcode.STRING
            stack.add( BossValue(BossValueType.STRING, code[frame.ip]) )
            ++frame.ip

          case BossOpcode.READ_ARG_1
            stack.add( stack[frame.fp+1] )

          case BossOpcode.READ_ARG_2
            stack.add( stack[frame.fp+2] )

          case BossOpcode.READ_ARG_3
            stack.add( stack[frame.fp+3] )

          case BossOpcode.READ_ARG_N
            stack.add( stack[frame.fp+code[frame.ip]] )
            ++frame.ip

          case BossOpcode.ADD
            local b = stack.remove_last
            stack[ stack.count-1 ] += b

          case BossOpcode.PRINT
            print stack.remove_last

          case BossOpcode.PRINTLN
            println

          others
            throw Error( "Unhandled opcode in BossVM: " + opcode )
        endWhich
      endLoop

    method pop->BossValue
      if (stack.count) return stack.remove_last
      return BossValue.UNDEFINED

    method result->BossValue
      if (not is_finished) return BossValue.UNDEFINED
      return stack.last

endClass

enum BossValueType
  UNDEFINED
  NULL
  LOGICAL
  INT32
  REAL64
  STRING
  OBJECT
endEnum

class BossValue( type:BossValueType, value:Real64 ) [compound]
  GLOBAL METHODS
    method create( value:Int32 )->BossValue
      return BossValue( BossValueType.INT32, value )

    method create( value:Logical )->BossValue
      return BossValue( BossValueType.LOGICAL, value->Real64 )

    method create( value:Real64 )->BossValue
      return BossValue( BossValueType.REAL64, value )

    method create( value:String )->BossValue
      BossVM.strings.add( value )
      return BossValue( BossValueType.STRING, BossVM.strings.count-1 )

    method create( value:BossObject )->BossValue
      BossVM.objects.add( value )
      return BossValue( BossValueType.OBJECT, BossVM.strings.count-1 )

    method create( value:Value )->BossValue
      if (value.is_string)  return BossValue( value->String )
      if (value.is_int32)   return BossValue( value->Int32 )
      if (value.is_number)  return BossValue( value->Real64 )
      if (value.is_logical) return BossValue( value->Logical )
      if (value.is_null)    return BossValue.NULL
      return BossValue.UNDEFINED

    method NULL->BossValue
      return BossValue( BossValueType.NULL, 0 )

    method UNDEFINED->BossValue
      return BossValue( BossValueType.UNDEFINED, 0 )

  METHODS
    method is_undefined->Logical [macro]
      (this.type == BossValueType.UNDEFINED)

    method is_null->Logical [macro]
      (this.type == BossValueType.NULL)

    method is_logical->Logical [macro]
      (this.type == BossValueType.LOGICAL)

    method is_int32->Logical [macro]
      (this.type == BossValueType.INT32)

    method is_real64->Logical [macro]
      (this.type == BossValueType.REAL64)

    method is_string->Logical [macro]
      (this.type == BossValueType.STRING)

    method is_object->Logical [macro]
      (this.type == BossValueType.OBJECT)

    method operator+( other:BossValue )->BossValue
      if (this.is_string or other.is_string)
        return BossValue( this->String + other->String )
      endIf
      if (this.is_undefined or other.is_undefined) return BossValue.UNDEFINED
      if (this.is_null) return other
      if (other.is_null) return this
      if (this.is_real64 or other.is_real64) return BossValue( this->Real64 + other->Real64 )
      if (this.is_int32 or other.is_int32) return BossValue( this->Int32 + other->Int32 )
      return BossValue( this->Logical or other->Logical )

    method to->Logical
      which (type)
        case BossValueType.UNDEFINED: return false
        case BossValueType.NULL:      return false
        case BossValueType.LOGICAL:   return value
        case BossValueType.INT32:     return value != 0
        case BossValueType.REAL64:    return value != 0
        case BossValueType.STRING
          local st = this->String
          if (st.equals("true",&ignore_case))  return true
          if (st.equals("false",&ignore_case)) return false
          return this->Int32 != 0
        others
          return false
      endWhich

    method to->Real64
      which (type)
        case BossValueType.UNDEFINED: return 0
        case BossValueType.NULL:      return 0
        case BossValueType.LOGICAL:   return ?:{ value!=0:1 || 0 }
        case BossValueType.INT32:     return value
        case BossValueType.REAL64:    return value
        case BossValueType.STRING:    return value->Real64
        others
          return 0
      endWhich

    method to->Int32
      which (type)
        case BossValueType.UNDEFINED: return 0
        case BossValueType.NULL:      return 0
        case BossValueType.LOGICAL:   return ?:{ value!=0:1 || 0 }
        case BossValueType.INT32:     return value
        case BossValueType.REAL64:    return value
        case BossValueType.STRING:    return value->Int32
        others
          return 0
      endWhich

    method to->String
      which (type)
        case BossValueType.UNDEFINED: return "undefined"
        case BossValueType.NULL:      return "null"
        case BossValueType.LOGICAL:   return ?:{ value!=0:"true" || "false" }
        case BossValueType.INT32:     return ?:{ value:value->Int32->String || "0" }
        case BossValueType.REAL64:    return ?:{ value:value->String || "0.0" }
        case BossValueType.STRING:    return BossVM.strings[ value ]
        others
          return "unknown"
      endWhich

    method to->BossObject
      if (is_object) return BossVM.objects[ value ]
      return null

endClass


class BossObject
  PROPERTIES
    methods = BossMethod[](2)

  METHODS
    method add( m:BossMethod )->this
      methods.add( m )
      return this

    method call( m_name:String, args=null:Value )->BossTask
      local m = find_method( m_name )
      if (not m) return null
      local boss_call = BossCall( this, m )
      if (args)
        forEach (arg in args)
          boss_call.arg( BossValue(arg) )
        endForEach
      endIf
      return boss_call()

    method find_method( name:String )->BossMethod
      return find_method( BossVM.string_to_id(name) )

    method find_method( id:Int32 )->BossMethod
      forEach (m in methods)
        if (m.name_id == id) return m
      endForEach
      return null

endClass

