module Boss

local vm = BossVM()

local m = vm.type( "Test" ).define_method( "test" )
m.write( BossOpcode.READ_ARG, 0 )
m.write( BossOpcode.READ_ARG, 1 )
m.write( BossOpcode.READ_ARG, 2 )
#m.write_call( "add", 2 )
m.write( BossOpcode.PRINTLN )
m.write( BossOpcode.PRINTLN )
m.write( BossOpcode.PRINTLN )
m.write( BossOpcode.HALT )

m = vm.type( "Test" ).define_method( "add" )
m.write( BossOpcode.READ_ARG, 1 )
m.write( BossOpcode.READ_ARG, 2 )
m.write( BossOpcode.ADD )
m.write( BossOpcode.RETURN )

vm.type( "Test" ).create_object.call( "test", @[3,4] )

class BossVM [singleton]
  PROPERTIES
    literal_real64s   = Real64[]
    identifiers       = String[]
    id_lookup         = StringTable<<Int32>>()
    types             = BossType[]
    types_by_name     = StringTable<<BossType>>()
    types_by_idx      = Table<<Int32,BossType>>()
    objects           = BossObject[]
    open_object_slots = Int32[]
    strings           = String[]
    open_string_slots = Int32[]

    type_null         = BossTypeNull( this )
    type_undefined    = BossTypeUndefined( this )
    type_Number       = BossTypeNumber( this )
    type_String       = BossTypeString( this )
    type_Object       = BossTypeObject( this )
    type_XY           = BossTypeXY( this )
    type_Box          = BossTypeBox( this )

  METHODS
    method init
      BossVM = this  # set singleton

    method add_object( object:BossObject )->Int32
      if (open_object_slots.count)
        local slot = open_object_slots.remove_last
        objects[ slot ] = object
        return slot
      else
        local slot = objects.count
        objects.add( object )
        return slot
      endIf

    method add_string( value:String )->Int32
      if (open_string_slots.count)
        local slot = open_string_slots.remove_last
        strings[ slot ] = value
        return slot
      else
        local slot = strings.count
        strings.add( value )
        return slot
      endIf

    method type( type_name:String )->BossType
      local entry = types_by_name.find( type_name )
      if (entry) return entry.value
      return BossType( this, type_name )

    method name_to_idx( str:String )->Int32
      local entry = id_lookup.find( str )
      if (entry) return entry.value
      local index = identifiers.count
      identifiers.add( str )
      id_lookup[ str ] = index
      return index

  GLOBAL METHODS
    method format( value:Real64 )->String
      if (value.is_NaN) return "NaN"
      if (value.floor == value) return value->Int32->String
      return value->String

endClass

class BossMethod
  PROPERTIES
    vm           : BossVM
    code         = Int32[]
    name         : String
    name_idx     : Int32
    param_count  : Int32
    local_count  : Int32

  METHODS
    method init( vm, name )
      name_idx = vm.name_to_idx( name )

    method ip->Int32
      return code.count

    method write( opcode:BossOpcode )->this
      code.add( opcode->Int32 )
      return this

    method write( opcode:BossOpcode, value:Int32 )->this
      return write( opcode ).write( value )

    method write( value:Int32 )->this
      code.add( value )
      return this

    method write_call( m_name:String, arg_count:Int32 )->this
      write( BossOpcode.CALL )
      write( vm.name_to_idx(m_name) )
      write( arg_count )
      write( -1 )   # cached object type
      write( -1 )   # cached method slot
      return this
endClass

class BossError : Error
endClass

class BossCallFrame( m:BossMethod, fp:Int32, arg_count:Int32, lp:Int32, ip=0:Int32 ) [compound]
endClass

enum BossOpcode
  NOP
  HALT
  CALL
  RETURN
  LITERAL_INT32
  LITERAL_REAL64
  READ_ARG
  ADD
  PRINTLN
endEnum


class BossValue( type:BossType, x:Real64, y=0:Real64, width=0:Real64, height=0:Real64 ) [compound]
  METHODS
    method can_convert_to_number->Logical [macro]
      (this.type.can_convert_to_number)

    method index->Real64 [macro]
      this.x->Int32

    method set_index( new_value:Int32 ) [macro]
      this.x = new_value

    method set_value( new_value:Real64 ) [macro]
      this.x = new_value

    method to->Real64
      if (type.can_convert_to_number) return value
      else                            return NaN

    method to->String
      return type->String( this )

    method value->Real64 [macro]
      this.x
endClass


class BossType [abstract]
  PROPERTIES
    vm             : BossVM
    name           : String
    type_index     : Int32
    methods        = BossMethod[](5)
    method_lookup  = Table<<Int32,Int32>>()
    base_types     = BossType[](1)
    extended_types = BossType[](1)
    can_convert_to_number : Logical

  METHODS
    method init( vm, name )
      type_index = vm.types.count
      vm.types_by_name[ name ] = this
      vm.types_by_idx[ vm.name_to_idx(name) ] = this

    method create_object->BossObject
      return BossObject( this )

    method define_method( m_name:String )->BossMethod
      local m = BossMethod( vm, m_name )
      local entry = method_lookup.find( m.name_idx )
      if (entry)
        replace_method( methods[entry.value], m )
      else
        local slot = methods.count
        methods.add( m )
        method_lookup[ m.name_idx ] = slot
      endIf
      return m

    method extend( base_type_name:String )->this
      return extend( vm.type(base_type_name) )

    method extend( base_type:BossType )->this
      if (not base_types.contains(base_type))
        base_types.add( base_type )
        base_type.extended_types.add( this )
      endIf
      return this

    method find_method( m_name:String )->BossMethod
      return find_method( vm.name_to_idx(m_name) )

    method find_method( idx:Int32 )->BossMethod
      local entry = method_lookup.find( idx )
      if (entry) return methods[ entry.value ]

      forEach (base_type in base_types)
        local m = base_type.find_method( idx )
        if (m)
          # Inherit method and incorporate into this type
          method_lookup[ idx ] = methods.count
          methods.add( m )
          return m
        endIf
      endForEach

      return null

    method replace_method( existing_m:BossMethod, replacement_m:BossMethod )
      local entry = method_lookup.find( existing_m.name_idx )
      if (entry)
        local slot = entry.value
        if (methods[slot] is existing_m)
          methods[slot] = replacement_m
        else
          # If the method has been overridden, no need to keep propagating down the chain
          return
        endIf
      endIf
      (forEach in extended_types).replace_method( existing_m, replacement_m )

    method to->String
      return name

    method to->String( value:BossValue ) [abstract]

endClass

class BossTypeBox : BossType
  METHODS
    method init( vm:BossVM )
      prior.init( vm, "Box" )

    method to->String( value:BossValue )
      return "[$,$ $x$]" (BossVM.format(value.x),BossVM.format(value.y),BossVM.format(value.width),BossVM.format(value.height))
endClass

class BossTypeNull : BossType
  METHODS
    method init( vm:BossVM )
      prior.init( vm, "null" )
      can_convert_to_number = true

    method to->String( value:BossValue )
      return "null"
endClass

class BossTypeNumber : BossType
  METHODS
    method init( vm:BossVM )
      prior.init( vm, "Number" )
      can_convert_to_number = true

    method to->String( value:BossValue )
      return BossVM.format(value.x)
endClass

class BossTypeObject : BossType
  METHODS
    method init( vm:BossVM )
      prior.init( vm, "Object" )

    method to->String( value:BossValue )
      return "($)" (name)
endClass

class BossTypeString : BossType
  METHODS
    method init( vm:BossVM )
      prior.init( vm, "String" )

    method to->String( value:BossValue )
      return vm.strings[ value.index ]
endClass

class BossTypeUndefined : BossType
  METHODS
    method init( vm:BossVM )
      prior.init( vm, "undefined" )

    method to->String( value:BossValue )
      return "null"
endClass

class BossTypeXY : BossType
  METHODS
    method init( vm:BossVM )
      prior.init( vm, "XY" )

    method to->String( value:BossValue )
      return "($,$)" (BossVM.format(value.x),BossVM.format(value.y))
endClass

class BossObject
  PROPERTIES
    type         : BossType
    object_index : Int32

  METHODS
    method init( type )
      local vm = type.vm
      object_index = vm.add_object( this )

    method call( m_name:String, args:Value )->BossTask
      local m = type.find_method( m_name )
      if (not m) return null

      local task = BossTask( type.vm )
      task.push( this )

      if (args.count)
        forEach (arg in args)
          if (arg.is_number)        task.push( arg->Real64 )
          elseIf (arg.is_string)    task.push( arg->String )
          elseIf (arg.is_null)      task.push( null )
          else                      task.push_undefined
        endForEach
      endIf

      task.call( m, args.count )
      return task

    method to->String
      return "($)" (type.name)
endClass


class BossTask
  PROPERTIES
    vm          : BossVM
    frame       : BossCallFrame
    call_stack  = BossCallFrame[]
    stack       = BossValue[]

  METHODS
    method init( vm )

    method call( m:BossMethod, arg_count:Int32 )->this
      call_stack.add( frame )
      local lp = stack.count
      stack.expand( m.local_count )
      frame = BossCallFrame( m, lp-(arg_count+1), arg_count, lp )
      execute
      return this

    method execute->Logical
      if (call_stack.is_empty) return false

      local vm    = this.vm
      local code  = frame.m.code
      local stack = this.stack

      loop
        #trace BossOpcode(code[frame.ip])
        which (code[frame.ip])
          case BossOpcode.NOP
            ++frame.ip

          case BossOpcode.HALT
            return false

          case BossOpcode.CALL
            # [ip+0] CALL
            # [ip+1] method idx
            # [ip+2] arg count
            # [ip+3] cached object type index or -1
            # [ip+4] cached method slot
            #local new_fp = stack.count - (code[frame.ip+2]->Int32+1)
            #local m_idx = code[ frame.ip+1 ]

          case BossOpcode.LITERAL_INT32
            stack.add( BossValue(vm.type_Number,code[frame.ip+1]) )
            frame.ip += 2

          case BossOpcode.LITERAL_REAL64
            stack.add( BossValue(vm.type_Number,vm.literal_real64s[code[frame.ip+1]]) )
            frame.ip += 2

          case BossOpcode.READ_ARG
            local offset = code[ frame.ip + 1 ]->Int32
            if (offset >= 0 and offset <= frame.arg_count)
              stack.add( stack[frame.fp+offset] )
            else
              stack.add( BossValue(vm.type_undefined,0) )
            endIf
            frame.ip += 2

          case BossOpcode.ADD
            ++frame.ip
            local rhs = stack.last
            --stack.count
            local lhs = stack.last

            if (lhs.can_convert_to_number and rhs.can_convert_to_number)
              stack.last = BossValue( vm.type_Number, lhs.value + rhs.value )

            else
              stack.last = BossValue( vm.type_Number, NaN )

            endIf

          case BossOpcode.PRINTLN
            ++frame.ip
            println stack.remove_last

          others
            throw BossError( "[Boss] Unsupported opcode: $ $" (code[frame.ip],BossOpcode(code[frame.ip])) )
        endWhich
      endLoop

    method push( value:BossValue )->this
      stack.add( value )
      return this

    method push( object:BossObject )->this [preferred]
      if (object is null) stack.add( BossValue(vm.type_null,0) )
      else                stack.add( BossValue(vm.type_Object,object.object_index) )
      return this

    method push( value:Real64 )->this
      stack.add( BossValue(vm.type_Number,value) )
      return this

    method push( value:String )->this
      if (value is null) stack.add( BossValue(vm.type_null,0) )
      else               stack.add( BossValue(vm.type_String,vm.add_string(value)) )
      return this

    method push_undefined->this
      stack.add( BossValue(vm.type_undefined,0) )
      return this
endClass

